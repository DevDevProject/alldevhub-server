<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.jobservice.mapper.JobRecruitMapper">

    <insert id="insert" parameterType="com.example.jobservice.vo.JobRecruit" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO job_recruit (title, work_experience, url, department_id, company_id, type_id, deadline)
        VALUES (#{title}, #{workExperience}, #{url}, #{departmentId}, #{companyId}, #{typeId}, #{deadline})
    </insert>

    <select id="findAll" resultMap="JobRecruitMap">
        SELECT
            jr.id, jr.title, jr.created_at, jr.work_experience, jr.url,
            c.name AS company_name,
            t.name AS type_name
        FROM job_recruit jr
        JOIN company c ON c.id = jr.company_id
        JOIN type t ON t.id = jr.type_id
        ORDER BY jr.created_at DESC
        LIMIT #{pageable.pageSize}
        OFFSET #{pageable.offset}
    </select>
    <select id="findCategoriesByRecruitId" resultType="string">
        SELECT c.name
        FROM job_recruit_category jrc
        JOIN category c ON c.id = jrc.category_id
        WHERE jrc.job_recruit_id = #{id}
    </select>
    <select id="findStacksByRecruitId" resultType="string">
        SELECT s.name
        FROM job_recruit_stack jrs
        JOIN stack s ON s.id = jrs.stack_id
        WHERE jrs.job_recruit_id = #{id}
    </select>
    <select id="findAllCount" resultType="java.lang.Integer">
        SELECT count(jr.id)
        FROM job_recruit jr
        JOIN company c ON c.id = jr.company_id
        JOIN type t ON t.id = jr.type_id
        ORDER BY jr.created_at DESC
    </select>

    <resultMap id="JobRecruitMap" type="com.example.jobservice.vo.jobrecruit.JobRecruitPaging">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="url" column="url"/>
        <result property="workExperience" column="work_experience"/>
        <result property="createdAt" column="created_at"/>
        <result property="company" column="company_name" />
        <result property="type" column="type_name" />

        <collection property="categories" ofType="string"
                    select="findCategoriesByRecruitId" column="id"/>

        <collection property="stacks" ofType="string"
                    select="findStacksByRecruitId" column="id"/>
    </resultMap>

    <select id="findAllWithConditions" resultMap="JobRecruitMap">
        SELECT
        jr.id, jr.title, jr.created_at, jr.work_experience, jr.url,
        c.name AS company_name,
        t.name AS type_name,
        jr.deadline
        FROM job_recruit jr
        JOIN company c ON c.id = jr.company_id
        JOIN type t ON t.id = jr.type_id

        <!-- 기술 스택 필터링 -->
        <if test="condition.stacks != null and condition.stacks.size != 0">
            JOIN (
            SELECT job_recruit_id
            FROM job_recruit_stack jrs
            JOIN stack s ON s.id = jrs.stack_id
            WHERE s.name IN
            <foreach item="stack" collection="condition.stacks" open="(" separator="," close=")">
                #{stack}
            </foreach>
            GROUP BY job_recruit_id
            HAVING COUNT(DISTINCT s.name) = ${condition.stacks.size}
            ) matched_stacks ON matched_stacks.job_recruit_id = jr.id
        </if>

        <if test="condition.categories != null and condition.categories.size != 0">
            JOIN (
            SELECT job_recruit_id
            FROM job_recruit_category jrc
            JOIN category c ON c.id = jrc.category_id
            WHERE c.name IN
            <foreach item="category" collection="condition.categories" open="(" separator="," close=")">
                #{category}
            </foreach>
            GROUP BY job_recruit_id
            HAVING COUNT(DISTINCT c.name) = ${condition.categories.size}
            ) matched_categories ON matched_categories.job_recruit_id = jr.id
        </if>

         <where>
             <if test="condition.workExperiences != null and condition.workExperiences.size != 0">
                 AND (
                 <foreach item="exp" collection="condition.workExperiences" open="(" separator=" OR " close=")">
                     <choose>
                         <!-- 1) '신입'인 경우 -->
                         <when test="exp == '신입'">
                             jr.work_experience like '%신입%'
                         </when>
                         <!-- 2) 숫자인 경우: '숫자-…년' 앞부분 숫자 추출해 비교 -->
                         <otherwise>
                             CAST(
                             REGEXP_SUBSTR(jr.work_experience, '[0-9]+')
                             AS UNSIGNED
                             ) &gt;= #{exp}
                         </otherwise>
                     </choose>
                 </foreach>
                 )
             </if>

             <if test="condition.regions != null and condition.regions.size != 0">
                AND c.location IN
                <foreach item="region" collection="condition.regions" open="(" separator="," close=")">
                    #{region}
                </foreach>
            </if>
            <if test="condition.companyTypes.size != 0">
                AND c.size IN
                <foreach item="size" collection="condition.companyTypes" open="(" separator="," close=")">
                    #{size}
                </foreach>
            </if>
            <if test="true">
                AND (
                    jr.deadline = '상시채용'
                    OR jr.deadline >= CURRENT_DATE
                )
            </if>
         </where>
        <choose>
            <when test="sort == 'deadline'">
                ORDER BY
                CASE
                WHEN jr.deadline = '상시채용' THEN 1
                ELSE 0
                END,
                jr.deadline ASC
            </when>
            <when test="sort == 'created_at'">
                ORDER BY jr.created_at DESC
            </when>
            <when test="sort == 'popular'">
                ORDER BY jr.created_at ASC
            </when>
            <otherwise> jr.created_at </otherwise>
        </choose>
        LIMIT #{pageable.pageSize}
        OFFSET #{pageable.offset}
    </select>

    <select id="findAllWithConditionsCount" resultType="int" parameterType="map">
        SELECT
        COUNT(*)
        FROM job_recruit jr
        JOIN company c ON c.id = jr.company_id
        JOIN type t ON t.id = jr.type_id

        <!-- 기술 스택 필터링 (AND 조건으로 바깥 JOIN) -->
        <if test="condition.stacks != null and condition.stacks.size() &gt; 0">
            JOIN (
            SELECT job_recruit_id
            FROM job_recruit_stack jrs
            JOIN stack s ON s.id = jrs.stack_id
            WHERE s.name IN
            <foreach item="stack" collection="condition.stacks" open="(" separator="," close=")">
                #{stack}
            </foreach>
            GROUP BY job_recruit_id
            HAVING COUNT(DISTINCT s.name) = ${condition.stacks.size}
            ) matched_stacks ON matched_stacks.job_recruit_id = jr.id
        </if>

        <!-- 카테고리 필터링 -->
        <if test="condition.categories != null and condition.categories.size() &gt; 0">
            JOIN (
            SELECT job_recruit_id
            FROM job_recruit_category jrc
            JOIN category c2 ON c2.id = jrc.category_id
            WHERE c2.name IN
            <foreach item="category" collection="condition.categories" open="(" separator="," close=")">
                #{category}
            </foreach>
            GROUP BY job_recruit_id
            HAVING COUNT(DISTINCT c2.name) = #{categorySize}
            ) matched_categories ON matched_categories.job_recruit_id = jr.id
        </if>

        <!-- 나머지 필터들 (WHERE 절) -->
        <where>
            <!-- 경력 필터 -->
            <if test="condition.workExperiences != null and condition.workExperiences.size() &gt; 0">
                AND (
                <foreach item="exp" collection="condition.workExperiences" open="(" separator=" OR " close=")">
                    <choose>
                        <when test="exp == '신입'">
                            jr.work_experience LIKE '%신입%'
                        </when>
                        <otherwise>
                            CAST(REGEXP_SUBSTR(jr.work_experience, '[0-9]+') AS UNSIGNED) &gt;= #{exp}
                        </otherwise>
                    </choose>
                </foreach>
                )
            </if>

            <!-- 지역 필터 -->
            <if test="condition.regions != null and condition.regions.size() &gt; 0">
                AND c.location IN
                <foreach item="region" collection="condition.regions" open="(" separator="," close=")">
                    #{region}
                </foreach>
            </if>

            <!-- 회사 규모 필터 -->
            <if test="condition.companyTypes != null and condition.companyTypes.size() &gt; 0">
                AND c.size IN
                <foreach item="size" collection="condition.companyTypes" open="(" separator="," close=")">
                    #{size}
                </foreach>
            </if>
            <if test="true">
                AND (
                jr.deadline = '상시채용'
                OR jr.deadline >= CURRENT_DATE
                )
            </if>
        </where>
    </select>

</mapper>


